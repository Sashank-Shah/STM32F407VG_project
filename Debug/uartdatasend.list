
uartdatasend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001340  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001504  08001504  00011504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001530  08001530  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001530  08001530  00011530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001538  08001538  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800153c  0800153c  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800154c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800154c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074d2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010f6  00000000  00000000  0002750e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  00028608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00028b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fab7  00000000  00000000  000290d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e2a  00000000  00000000  00048b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6b8c  00000000  00000000  0004f9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011653d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001614  00000000  00000000  00116590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080014ec 	.word	0x080014ec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080014ec 	.word	0x080014ec

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
#include <string.h>

void SytemClockConfig(void);
void exception_led(void);
int main()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0

	char *str = "Shri Krishna Govind hare Murari\r\n";
 800051e:	4b17      	ldr	r3, [pc, #92]	; (800057c <main+0x64>)
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
	int len = strlen(str);
 8000522:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000524:	f7ff fe6e 	bl	8000204 <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	64bb      	str	r3, [r7, #72]	; 0x48
	SytemClockConfig();
 800052c:	f000 f82a 	bl	8000584 <SytemClockConfig>
	HAL_Init();
 8000530:	f000 f8b6 	bl	80006a0 <HAL_Init>

	//uart configuration starts
	UART_HandleTypeDef uart2_handle; //hanlder type variable

	uart2_handle.Instance = USART2; //usart to base address
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x68>)
 8000536:	607b      	str	r3, [r7, #4]
	uart2_handle.Init.BaudRate = 115200;
 8000538:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800053c:	60bb      	str	r3, [r7, #8]
	uart2_handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
	uart2_handle.Init.Mode = UART_MODE_TX_RX;
 8000542:	230c      	movs	r3, #12
 8000544:	61bb      	str	r3, [r7, #24]
	uart2_handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
	uart2_handle.Init.Parity = UART_PARITY_NONE;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
	uart2_handle.Init.StopBits = UART_STOPBITS_1;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
	uart2_handle.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]

	//initialze usart with all the user inputs
	if(HAL_UART_Init(&uart2_handle) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fbe1 	bl	8000d20 <HAL_UART_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <main+0x50>
	{
		//if uart is not properly initailzed then call any exception exmaple blink an red led
		exception_led();
 8000564:	f000 f815 	bl	8000592 <exception_led>
	}

	HAL_UART_Transmit(&uart2_handle, (uint8_t*)str, (uint16_t)len, HAL_MAX_DELAY);
 8000568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800056a:	b29a      	uxth	r2, r3
 800056c:	1d38      	adds	r0, r7, #4
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000574:	f000 fc21 	bl	8000dba <HAL_UART_Transmit>
	while(1);
 8000578:	e7fe      	b.n	8000578 <main+0x60>
 800057a:	bf00      	nop
 800057c:	08001504 	.word	0x08001504
 8000580:	40004400 	.word	0x40004400

08000584 <SytemClockConfig>:

	return 0;
}

void SytemClockConfig(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	//use HSI
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <exception_led>:

void exception_led(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
	while(1);
 8000596:	e7fe      	b.n	8000596 <exception_led+0x4>

08000598 <HAL_UART_MspInit>:

}


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	//peripheral clk enable
	__HAL_RCC_USART2_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_UART_MspInit+0x88>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <HAL_UART_MspInit+0x88>)
 80005aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <HAL_UART_MspInit+0x88>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_UART_MspInit+0x88>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a16      	ldr	r2, [pc, #88]	; (8000620 <HAL_UART_MspInit+0x88>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_UART_MspInit+0x88>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

	//pin configuration using some
	GPIO_InitTypeDef gpioA;
	gpioA.Pin = GPIO_PIN_2;
 80005d8:	2304      	movs	r3, #4
 80005da:	617b      	str	r3, [r7, #20]
	gpioA.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	61bb      	str	r3, [r7, #24]
	gpioA.Pull = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
	gpioA.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	gpioA.Alternate = GPIO_AF7_USART2;
 80005e8:	2307      	movs	r3, #7
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpioA);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <HAL_UART_MspInit+0x8c>)
 80005f4:	f000 f9cc 	bl	8000990 <HAL_GPIO_Init>

	gpioA.Pin = GPIO_PIN_3;
 80005f8:	2308      	movs	r3, #8
 80005fa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpioA);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <HAL_UART_MspInit+0x8c>)
 8000604:	f000 f9c4 	bl	8000990 <HAL_GPIO_Init>

	//IRQ settings

	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000608:	2026      	movs	r0, #38	; 0x26
 800060a:	f000 f9a6 	bl	800095a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	210f      	movs	r1, #15
 8000612:	2026      	movs	r0, #38	; 0x26
 8000614:	f000 f985 	bl	8000922 <HAL_NVIC_SetPriority>


}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <SystemInit+0x20>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <SystemInit+0x20>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800064c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000668:	4c0b      	ldr	r4, [pc, #44]	; (8000698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000676:	f7ff ffd7 	bl	8000628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067a:	f000 ff13 	bl	80014a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800067e:	f7ff ff4b 	bl	8000518 <main>
  bx  lr    
 8000682:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000684:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000690:	08001540 	.word	0x08001540
  ldr r2, =_sbss
 8000694:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000698:	2000002c 	.word	0x2000002c

0800069c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_Init+0x40>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <HAL_Init+0x40>)
 80006aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <HAL_Init+0x40>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <HAL_Init+0x40>)
 80006b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_Init+0x40>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_Init+0x40>)
 80006c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f91f 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 f810 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d4:	f000 f806 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023c00 	.word	0x40023c00

080006e4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f92f 	bl	8000976 <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f8f7 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HAL_GetTick+0x14>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000028 	.word	0x20000028

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	db0b      	blt.n	80007fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	f003 021f 	and.w	r2, r3, #31
 80007e8:	4907      	ldr	r1, [pc, #28]	; (8000808 <__NVIC_EnableIRQ+0x38>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	2001      	movs	r0, #1
 80007f2:	fa00 f202 	lsl.w	r2, r0, r2
 80007f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	2b00      	cmp	r3, #0
 800081e:	db0a      	blt.n	8000836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <__NVIC_SetPriority+0x4c>)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	0112      	lsls	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	440b      	add	r3, r1
 8000830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000834:	e00a      	b.n	800084c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4908      	ldr	r1, [pc, #32]	; (800085c <__NVIC_SetPriority+0x50>)
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	3b04      	subs	r3, #4
 8000844:	0112      	lsls	r2, r2, #4
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	440b      	add	r3, r1
 800084a:	761a      	strb	r2, [r3, #24]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000860:	b480      	push	{r7}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f1c3 0307 	rsb	r3, r3, #7
 800087a:	2b04      	cmp	r3, #4
 800087c:	bf28      	it	cs
 800087e:	2304      	movcs	r3, #4
 8000880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3304      	adds	r3, #4
 8000886:	2b06      	cmp	r3, #6
 8000888:	d902      	bls.n	8000890 <NVIC_EncodePriority+0x30>
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3b03      	subs	r3, #3
 800088e:	e000      	b.n	8000892 <NVIC_EncodePriority+0x32>
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	f04f 32ff 	mov.w	r2, #4294967295
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43da      	mvns	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	401a      	ands	r2, r3
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa01 f303 	lsl.w	r3, r1, r3
 80008b2:	43d9      	mvns	r1, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	4313      	orrs	r3, r2
         );
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3724      	adds	r7, #36	; 0x24
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff8e 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff29 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff3e 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff8e 	bl	8000860 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5d 	bl	800080c <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff31 	bl	80007d0 <__NVIC_EnableIRQ>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ffa2 	bl	80008c8 <SysTick_Config>
 8000984:	4603      	mov	r3, r0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e165      	b.n	8000c78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009ac:	2201      	movs	r2, #1
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	f040 8154 	bne.w	8000c72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d005      	beq.n	80009e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d130      	bne.n	8000a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	2203      	movs	r2, #3
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	68da      	ldr	r2, [r3, #12]
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4013      	ands	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	091b      	lsrs	r3, r3, #4
 8000a2e:	f003 0201 	and.w	r2, r3, #1
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	2b03      	cmp	r3, #3
 8000a4e:	d017      	beq.n	8000a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d123      	bne.n	8000ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	691a      	ldr	r2, [r3, #16]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	08da      	lsrs	r2, r3, #3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3208      	adds	r2, #8
 8000ace:	69b9      	ldr	r1, [r7, #24]
 8000ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0203 	and.w	r2, r3, #3
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 80ae 	beq.w	8000c72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <HAL_GPIO_Init+0x300>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a5c      	ldr	r2, [pc, #368]	; (8000c90 <HAL_GPIO_Init+0x300>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b5a      	ldr	r3, [pc, #360]	; (8000c90 <HAL_GPIO_Init+0x300>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b32:	4a58      	ldr	r2, [pc, #352]	; (8000c94 <HAL_GPIO_Init+0x304>)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4013      	ands	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4f      	ldr	r2, [pc, #316]	; (8000c98 <HAL_GPIO_Init+0x308>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d025      	beq.n	8000baa <HAL_GPIO_Init+0x21a>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4e      	ldr	r2, [pc, #312]	; (8000c9c <HAL_GPIO_Init+0x30c>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d01f      	beq.n	8000ba6 <HAL_GPIO_Init+0x216>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <HAL_GPIO_Init+0x310>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d019      	beq.n	8000ba2 <HAL_GPIO_Init+0x212>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4c      	ldr	r2, [pc, #304]	; (8000ca4 <HAL_GPIO_Init+0x314>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0x20e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4b      	ldr	r2, [pc, #300]	; (8000ca8 <HAL_GPIO_Init+0x318>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d00d      	beq.n	8000b9a <HAL_GPIO_Init+0x20a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4a      	ldr	r2, [pc, #296]	; (8000cac <HAL_GPIO_Init+0x31c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d007      	beq.n	8000b96 <HAL_GPIO_Init+0x206>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a49      	ldr	r2, [pc, #292]	; (8000cb0 <HAL_GPIO_Init+0x320>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d101      	bne.n	8000b92 <HAL_GPIO_Init+0x202>
 8000b8e:	2306      	movs	r3, #6
 8000b90:	e00c      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000b92:	2307      	movs	r3, #7
 8000b94:	e00a      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000b96:	2305      	movs	r3, #5
 8000b98:	e008      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e004      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <HAL_GPIO_Init+0x21c>
 8000baa:	2300      	movs	r3, #0
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	f002 0203 	and.w	r2, r2, #3
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	4093      	lsls	r3, r2
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bbc:	4935      	ldr	r1, [pc, #212]	; (8000c94 <HAL_GPIO_Init+0x304>)
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bee:	4a31      	ldr	r2, [pc, #196]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c18:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <HAL_GPIO_Init+0x324>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3301      	adds	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	f67f ae96 	bls.w	80009ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40021400 	.word	0x40021400
 8000cb0:	40021800 	.word	0x40021800
 8000cb4:	40013c00 	.word	0x40013c00

08000cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000cd4:	f7ff fff0 	bl	8000cb8 <HAL_RCC_GetHCLKFreq>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	0a9b      	lsrs	r3, r3, #10
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	4903      	ldr	r1, [pc, #12]	; (8000cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ce6:	5ccb      	ldrb	r3, [r1, r3]
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	08001528 	.word	0x08001528

08000cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000cfc:	f7ff ffdc 	bl	8000cb8 <HAL_RCC_GetHCLKFreq>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	0b5b      	lsrs	r3, r3, #13
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	4903      	ldr	r1, [pc, #12]	; (8000d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d0e:	5ccb      	ldrb	r3, [r1, r3]
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	08001528 	.word	0x08001528

08000d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e03f      	b.n	8000db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d106      	bne.n	8000d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff fc26 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2224      	movs	r2, #36	; 0x24
 8000d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f929 	bl	8000fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2220      	movs	r2, #32
 8000da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b08a      	sub	sp, #40	; 0x28
 8000dbe:	af02      	add	r7, sp, #8
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b20      	cmp	r3, #32
 8000dd8:	d17c      	bne.n	8000ed4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <HAL_UART_Transmit+0x2c>
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e075      	b.n	8000ed6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_UART_Transmit+0x3e>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e06e      	b.n	8000ed6 <HAL_UART_Transmit+0x11c>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2221      	movs	r2, #33	; 0x21
 8000e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e0e:	f7ff fca1 	bl	8000754 <HAL_GetTick>
 8000e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	88fa      	ldrh	r2, [r7, #6]
 8000e18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e28:	d108      	bne.n	8000e3c <HAL_UART_Transmit+0x82>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d104      	bne.n	8000e3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	e003      	b.n	8000e44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000e4c:	e02a      	b.n	8000ea4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f000 f840 	bl	8000ede <UART_WaitOnFlagUntilTimeout>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e036      	b.n	8000ed6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10b      	bne.n	8000e86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	3302      	adds	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	e007      	b.n	8000e96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	3301      	adds	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1cf      	bne.n	8000e4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f000 f810 	bl	8000ede <UART_WaitOnFlagUntilTimeout>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e006      	b.n	8000ed6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2220      	movs	r2, #32
 8000ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e000      	b.n	8000ed6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000ed4:	2302      	movs	r3, #2
  }
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b090      	sub	sp, #64	; 0x40
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000eee:	e050      	b.n	8000f92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef6:	d04c      	beq.n	8000f92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <UART_WaitOnFlagUntilTimeout+0x30>
 8000efe:	f7ff fc29 	bl	8000754 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d241      	bcs.n	8000f92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	330c      	adds	r3, #12
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f18:	e853 3f00 	ldrex	r3, [r3]
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	330c      	adds	r3, #12
 8000f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f2e:	637a      	str	r2, [r7, #52]	; 0x34
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f36:	e841 2300 	strex	r3, r2, [r1]
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1e5      	bne.n	8000f0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3314      	adds	r3, #20
 8000f48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	e853 3f00 	ldrex	r3, [r3]
 8000f50:	613b      	str	r3, [r7, #16]
   return(result);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3314      	adds	r3, #20
 8000f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f62:	623a      	str	r2, [r7, #32]
 8000f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f66:	69f9      	ldr	r1, [r7, #28]
 8000f68:	6a3a      	ldr	r2, [r7, #32]
 8000f6a:	e841 2300 	strex	r3, r2, [r1]
 8000f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1e5      	bne.n	8000f42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2220      	movs	r2, #32
 8000f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2220      	movs	r2, #32
 8000f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e00f      	b.n	8000fb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d09f      	beq.n	8000ef0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3740      	adds	r7, #64	; 0x40
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fc0:	b0c0      	sub	sp, #256	; 0x100
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fd8:	68d9      	ldr	r1, [r3, #12]
 8000fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	ea40 0301 	orr.w	r3, r0, r1
 8000fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4313      	orrs	r3, r2
 8001004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001014:	f021 010c 	bic.w	r1, r1, #12
 8001018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001022:	430b      	orrs	r3, r1
 8001024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001036:	6999      	ldr	r1, [r3, #24]
 8001038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	ea40 0301 	orr.w	r3, r0, r1
 8001042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <UART_SetConfig+0x2cc>)
 800104c:	429a      	cmp	r2, r3
 800104e:	d005      	beq.n	800105c <UART_SetConfig+0xa0>
 8001050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b8d      	ldr	r3, [pc, #564]	; (800128c <UART_SetConfig+0x2d0>)
 8001058:	429a      	cmp	r2, r3
 800105a:	d104      	bne.n	8001066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800105c:	f7ff fe4c 	bl	8000cf8 <HAL_RCC_GetPCLK2Freq>
 8001060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001064:	e003      	b.n	800106e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001066:	f7ff fe33 	bl	8000cd0 <HAL_RCC_GetPCLK1Freq>
 800106a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800106e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001078:	f040 810c 	bne.w	8001294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800107c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001080:	2200      	movs	r2, #0
 8001082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800108a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800108e:	4622      	mov	r2, r4
 8001090:	462b      	mov	r3, r5
 8001092:	1891      	adds	r1, r2, r2
 8001094:	65b9      	str	r1, [r7, #88]	; 0x58
 8001096:	415b      	adcs	r3, r3
 8001098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800109a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800109e:	4621      	mov	r1, r4
 80010a0:	eb12 0801 	adds.w	r8, r2, r1
 80010a4:	4629      	mov	r1, r5
 80010a6:	eb43 0901 	adc.w	r9, r3, r1
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010be:	4690      	mov	r8, r2
 80010c0:	4699      	mov	r9, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	eb18 0303 	adds.w	r3, r8, r3
 80010c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80010cc:	462b      	mov	r3, r5
 80010ce:	eb49 0303 	adc.w	r3, r9, r3
 80010d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80010d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80010e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80010e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80010ea:	460b      	mov	r3, r1
 80010ec:	18db      	adds	r3, r3, r3
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
 80010f0:	4613      	mov	r3, r2
 80010f2:	eb42 0303 	adc.w	r3, r2, r3
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
 80010f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80010fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001100:	f7ff f888 	bl	8000214 <__aeabi_uldivmod>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4b61      	ldr	r3, [pc, #388]	; (8001290 <UART_SetConfig+0x2d4>)
 800110a:	fba3 2302 	umull	r2, r3, r3, r2
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	011c      	lsls	r4, r3, #4
 8001112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001116:	2200      	movs	r2, #0
 8001118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800111c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001124:	4642      	mov	r2, r8
 8001126:	464b      	mov	r3, r9
 8001128:	1891      	adds	r1, r2, r2
 800112a:	64b9      	str	r1, [r7, #72]	; 0x48
 800112c:	415b      	adcs	r3, r3
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001134:	4641      	mov	r1, r8
 8001136:	eb12 0a01 	adds.w	sl, r2, r1
 800113a:	4649      	mov	r1, r9
 800113c:	eb43 0b01 	adc.w	fp, r3, r1
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800114c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001154:	4692      	mov	sl, r2
 8001156:	469b      	mov	fp, r3
 8001158:	4643      	mov	r3, r8
 800115a:	eb1a 0303 	adds.w	r3, sl, r3
 800115e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001162:	464b      	mov	r3, r9
 8001164:	eb4b 0303 	adc.w	r3, fp, r3
 8001168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800116c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800117c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001180:	460b      	mov	r3, r1
 8001182:	18db      	adds	r3, r3, r3
 8001184:	643b      	str	r3, [r7, #64]	; 0x40
 8001186:	4613      	mov	r3, r2
 8001188:	eb42 0303 	adc.w	r3, r2, r3
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
 800118e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001196:	f7ff f83d 	bl	8000214 <__aeabi_uldivmod>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <UART_SetConfig+0x2d4>)
 80011a2:	fba3 2301 	umull	r2, r3, r3, r1
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2264      	movs	r2, #100	; 0x64
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	1acb      	subs	r3, r1, r3
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80011b6:	4b36      	ldr	r3, [pc, #216]	; (8001290 <UART_SetConfig+0x2d4>)
 80011b8:	fba3 2302 	umull	r2, r3, r3, r2
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80011c4:	441c      	add	r4, r3
 80011c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80011ca:	2200      	movs	r2, #0
 80011cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80011d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80011d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80011d8:	4642      	mov	r2, r8
 80011da:	464b      	mov	r3, r9
 80011dc:	1891      	adds	r1, r2, r2
 80011de:	63b9      	str	r1, [r7, #56]	; 0x38
 80011e0:	415b      	adcs	r3, r3
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011e8:	4641      	mov	r1, r8
 80011ea:	1851      	adds	r1, r2, r1
 80011ec:	6339      	str	r1, [r7, #48]	; 0x30
 80011ee:	4649      	mov	r1, r9
 80011f0:	414b      	adcs	r3, r1
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001200:	4659      	mov	r1, fp
 8001202:	00cb      	lsls	r3, r1, #3
 8001204:	4651      	mov	r1, sl
 8001206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800120a:	4651      	mov	r1, sl
 800120c:	00ca      	lsls	r2, r1, #3
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	4603      	mov	r3, r0
 8001214:	4642      	mov	r2, r8
 8001216:	189b      	adds	r3, r3, r2
 8001218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800121c:	464b      	mov	r3, r9
 800121e:	460a      	mov	r2, r1
 8001220:	eb42 0303 	adc.w	r3, r2, r3
 8001224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800123c:	460b      	mov	r3, r1
 800123e:	18db      	adds	r3, r3, r3
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
 8001242:	4613      	mov	r3, r2
 8001244:	eb42 0303 	adc.w	r3, r2, r3
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800124a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800124e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001252:	f7fe ffdf 	bl	8000214 <__aeabi_uldivmod>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <UART_SetConfig+0x2d4>)
 800125c:	fba3 1302 	umull	r1, r3, r3, r2
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	2164      	movs	r1, #100	; 0x64
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	3332      	adds	r3, #50	; 0x32
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <UART_SetConfig+0x2d4>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	095b      	lsrs	r3, r3, #5
 8001276:	f003 0207 	and.w	r2, r3, #7
 800127a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4422      	add	r2, r4
 8001282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001284:	e105      	b.n	8001492 <UART_SetConfig+0x4d6>
 8001286:	bf00      	nop
 8001288:	40011000 	.word	0x40011000
 800128c:	40011400 	.word	0x40011400
 8001290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001298:	2200      	movs	r2, #0
 800129a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800129e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80012a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80012a6:	4642      	mov	r2, r8
 80012a8:	464b      	mov	r3, r9
 80012aa:	1891      	adds	r1, r2, r2
 80012ac:	6239      	str	r1, [r7, #32]
 80012ae:	415b      	adcs	r3, r3
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012b6:	4641      	mov	r1, r8
 80012b8:	1854      	adds	r4, r2, r1
 80012ba:	4649      	mov	r1, r9
 80012bc:	eb43 0501 	adc.w	r5, r3, r1
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	00eb      	lsls	r3, r5, #3
 80012ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012ce:	00e2      	lsls	r2, r4, #3
 80012d0:	4614      	mov	r4, r2
 80012d2:	461d      	mov	r5, r3
 80012d4:	4643      	mov	r3, r8
 80012d6:	18e3      	adds	r3, r4, r3
 80012d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012dc:	464b      	mov	r3, r9
 80012de:	eb45 0303 	adc.w	r3, r5, r3
 80012e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80012e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001302:	4629      	mov	r1, r5
 8001304:	008b      	lsls	r3, r1, #2
 8001306:	4621      	mov	r1, r4
 8001308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800130c:	4621      	mov	r1, r4
 800130e:	008a      	lsls	r2, r1, #2
 8001310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001314:	f7fe ff7e 	bl	8000214 <__aeabi_uldivmod>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <UART_SetConfig+0x4e4>)
 800131e:	fba3 2302 	umull	r2, r3, r3, r2
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	011c      	lsls	r4, r3, #4
 8001326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800132a:	2200      	movs	r2, #0
 800132c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001338:	4642      	mov	r2, r8
 800133a:	464b      	mov	r3, r9
 800133c:	1891      	adds	r1, r2, r2
 800133e:	61b9      	str	r1, [r7, #24]
 8001340:	415b      	adcs	r3, r3
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001348:	4641      	mov	r1, r8
 800134a:	1851      	adds	r1, r2, r1
 800134c:	6139      	str	r1, [r7, #16]
 800134e:	4649      	mov	r1, r9
 8001350:	414b      	adcs	r3, r1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001360:	4659      	mov	r1, fp
 8001362:	00cb      	lsls	r3, r1, #3
 8001364:	4651      	mov	r1, sl
 8001366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800136a:	4651      	mov	r1, sl
 800136c:	00ca      	lsls	r2, r1, #3
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	4603      	mov	r3, r0
 8001374:	4642      	mov	r2, r8
 8001376:	189b      	adds	r3, r3, r2
 8001378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800137c:	464b      	mov	r3, r9
 800137e:	460a      	mov	r2, r1
 8001380:	eb42 0303 	adc.w	r3, r2, r3
 8001384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	67bb      	str	r3, [r7, #120]	; 0x78
 8001392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80013a0:	4649      	mov	r1, r9
 80013a2:	008b      	lsls	r3, r1, #2
 80013a4:	4641      	mov	r1, r8
 80013a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80013aa:	4641      	mov	r1, r8
 80013ac:	008a      	lsls	r2, r1, #2
 80013ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80013b2:	f7fe ff2f 	bl	8000214 <__aeabi_uldivmod>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <UART_SetConfig+0x4e4>)
 80013bc:	fba3 1302 	umull	r1, r3, r3, r2
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	2164      	movs	r1, #100	; 0x64
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	3332      	adds	r3, #50	; 0x32
 80013ce:	4a34      	ldr	r2, [pc, #208]	; (80014a0 <UART_SetConfig+0x4e4>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013da:	441c      	add	r4, r3
 80013dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013e0:	2200      	movs	r2, #0
 80013e2:	673b      	str	r3, [r7, #112]	; 0x70
 80013e4:	677a      	str	r2, [r7, #116]	; 0x74
 80013e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80013ea:	4642      	mov	r2, r8
 80013ec:	464b      	mov	r3, r9
 80013ee:	1891      	adds	r1, r2, r2
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	415b      	adcs	r3, r3
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fa:	4641      	mov	r1, r8
 80013fc:	1851      	adds	r1, r2, r1
 80013fe:	6039      	str	r1, [r7, #0]
 8001400:	4649      	mov	r1, r9
 8001402:	414b      	adcs	r3, r1
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001412:	4659      	mov	r1, fp
 8001414:	00cb      	lsls	r3, r1, #3
 8001416:	4651      	mov	r1, sl
 8001418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800141c:	4651      	mov	r1, sl
 800141e:	00ca      	lsls	r2, r1, #3
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	4603      	mov	r3, r0
 8001426:	4642      	mov	r2, r8
 8001428:	189b      	adds	r3, r3, r2
 800142a:	66bb      	str	r3, [r7, #104]	; 0x68
 800142c:	464b      	mov	r3, r9
 800142e:	460a      	mov	r2, r1
 8001430:	eb42 0303 	adc.w	r3, r2, r3
 8001434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	663b      	str	r3, [r7, #96]	; 0x60
 8001440:	667a      	str	r2, [r7, #100]	; 0x64
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800144e:	4649      	mov	r1, r9
 8001450:	008b      	lsls	r3, r1, #2
 8001452:	4641      	mov	r1, r8
 8001454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001458:	4641      	mov	r1, r8
 800145a:	008a      	lsls	r2, r1, #2
 800145c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001460:	f7fe fed8 	bl	8000214 <__aeabi_uldivmod>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <UART_SetConfig+0x4e4>)
 800146a:	fba3 1302 	umull	r1, r3, r3, r2
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2164      	movs	r1, #100	; 0x64
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	3332      	adds	r3, #50	; 0x32
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <UART_SetConfig+0x4e4>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	f003 020f 	and.w	r2, r3, #15
 8001488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4422      	add	r2, r4
 8001490:	609a      	str	r2, [r3, #8]
}
 8001492:	bf00      	nop
 8001494:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001498:	46bd      	mov	sp, r7
 800149a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800149e:	bf00      	nop
 80014a0:	51eb851f 	.word	0x51eb851f

080014a4 <__libc_init_array>:
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	4d0d      	ldr	r5, [pc, #52]	; (80014dc <__libc_init_array+0x38>)
 80014a8:	4c0d      	ldr	r4, [pc, #52]	; (80014e0 <__libc_init_array+0x3c>)
 80014aa:	1b64      	subs	r4, r4, r5
 80014ac:	10a4      	asrs	r4, r4, #2
 80014ae:	2600      	movs	r6, #0
 80014b0:	42a6      	cmp	r6, r4
 80014b2:	d109      	bne.n	80014c8 <__libc_init_array+0x24>
 80014b4:	4d0b      	ldr	r5, [pc, #44]	; (80014e4 <__libc_init_array+0x40>)
 80014b6:	4c0c      	ldr	r4, [pc, #48]	; (80014e8 <__libc_init_array+0x44>)
 80014b8:	f000 f818 	bl	80014ec <_init>
 80014bc:	1b64      	subs	r4, r4, r5
 80014be:	10a4      	asrs	r4, r4, #2
 80014c0:	2600      	movs	r6, #0
 80014c2:	42a6      	cmp	r6, r4
 80014c4:	d105      	bne.n	80014d2 <__libc_init_array+0x2e>
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
 80014c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014cc:	4798      	blx	r3
 80014ce:	3601      	adds	r6, #1
 80014d0:	e7ee      	b.n	80014b0 <__libc_init_array+0xc>
 80014d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014d6:	4798      	blx	r3
 80014d8:	3601      	adds	r6, #1
 80014da:	e7f2      	b.n	80014c2 <__libc_init_array+0x1e>
 80014dc:	08001538 	.word	0x08001538
 80014e0:	08001538 	.word	0x08001538
 80014e4:	08001538 	.word	0x08001538
 80014e8:	0800153c 	.word	0x0800153c

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
